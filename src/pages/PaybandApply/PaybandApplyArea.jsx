import { useEffect, useState, useMemo } from 'react';
import PropTypes from 'prop-types';
import styles from './payband-apply-page.module.css';
import PaybandApplyTable from './PaybandApplyTable';
import Button from '#components/Button';
import TableOption from '#components/TableOption';

// üîÅ ÌïúÍ∏Ä ‚Üí Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞ ÌïÑÎìúÎ™Ö Îß§Ìïë
const convertKeyToField = (key) => {
  const map = {
    ÏßÅÎ≤à: 'emp_num',
    ÏÑ±Î™Ö: 'name',
    Î∂ÄÏÑú: 'dep_name',
    ÏßÅÍ∏â: 'grade_name',
    ÌèâÍ∞ÄÎì±Í∏â: 'rank_name',
    Í∏∞Ï§ÄÏó∞Î¥â: 'std_salary',
    ÏÉÅÌïúÍ∏àÏï°: 'upper_limit_price',
    ÌïòÌïúÍ∏àÏï°: 'lower_limit_price',
    PaybandÏ†ÅÏö©: 'in_payband_use_group',
  };
  return map[key] || key;
};

function PaybandApplyArea({ type: boundType, data, dispatch, originalData }) {
  const [filters, setFilters] = useState([]);
  const [sortList, setSortList] = useState([]);
  const [currentPage, setCurrentPage] = useState(1);
  const [rowsPerPage, setRowsPerPage] = useState(5);
  const [tableData, setTableData] = useState([]);

  const handleCheckBox = (empNum) => {
    dispatch({
      type: 'toggleCheck',
      payload: { boundType, empNum },
    });
  };

  const handlePaybandApplyGroupSwitch = (empNums, isOn) => {
    dispatch({
      type: 'toggleGroup',
      payload: { boundType, empNums, value: isOn },
    });
  };

  const checkedItems = data
    .filter((item) => item.isChecked)
    .map((item) => item.emp_num);

  const handleSelectAll = () => {
    dispatch({
      type: 'setAllChecked',
      payload: { value: true, boundType },
    });
  };

  const handleClearSelection = () => {
    dispatch({
      type: 'setAllChecked',
      payload: { value: false, boundType },
    });
  };

  const handleTableOptionSubmit = ({ type, payload }) => {
    if (type === 'filter') setFilters(payload);
    if (type === 'sort') setSortList(payload);
  };

  // üîÅ ÏòµÏÖò ÏÉùÏÑ± Ìï®Ïàò
  const getSortedUniqueValues = (array, key) =>
    [...new Set(array.map((item) => item[key]))].sort();

  const getPaybandOptions = (array) =>
    [
      ...new Set(
        array.map((item) => (item.in_payband_use_group ? 'Ï†ÅÏö©' : 'ÎØ∏Ï†ÅÏö©')),
      ),
    ].sort();

  const filterOption = useMemo(
    () => ({
      ÏßÅÎ≤à: { optionType: 'text', initialValue: '' },
      ÏÑ±Î™Ö: { optionType: 'text', initialValue: '' },
      Î∂ÄÏÑú: {
        optionType: 'dropdown',
        initialValue: '',
        options: getSortedUniqueValues(originalData, 'dep_name'),
      },
      ÏßÅÍ∏â: {
        optionType: 'dropdown',
        initialValue: '',
        options: getSortedUniqueValues(originalData, 'grade_name'),
      },
      ÌèâÍ∞ÄÎì±Í∏â: {
        optionType: 'dropdown',
        initialValue: '',
        options: getSortedUniqueValues(originalData, 'rank_name'),
      },
      PaybandÏ†ÅÏö©: {
        optionType: 'dropdown',
        initialValue: '',
        options: getPaybandOptions(originalData),
      },
    }),
    [originalData],
  );

  useEffect(() => {
    let filtered = [...data];

    // ‚úÖ ÌïÑÌÑ∞ Ï†ÅÏö©
    filters.forEach(({ key, value }) => {
      if (!value || value.length === 0) return;

      filtered = filtered.filter((item) => {
        const field = convertKeyToField(key);
        let itemValue;
        if (field === 'in_payband_use_group') {
          itemValue = item[field] ? 'Ï†ÅÏö©' : 'ÎØ∏Ï†ÅÏö©';
        } else {
          itemValue = item[field];
        }

        return value.includes(itemValue);
      });
    });

    // ‚úÖ Ï†ïÎ†¨ Ï†ÅÏö© (ÎßàÏßÄÎßâ Ï†ïÎ†¨ Í∏∞Ï§ÄÎßå ÏÇ¨Ïö©)
    const lastSort = sortList[sortList.length - 1];
    if (lastSort) {
      const field = convertKeyToField(lastSort.key);
      const isAsc = lastSort.value === 'Ïò§Î¶ÑÏ∞®Ïàú';

      filtered = [...filtered].sort((a, b) => {
        const aVal = a[field];
        const bVal = b[field];

        if (typeof aVal === 'number' && typeof bVal === 'number') {
          return isAsc ? aVal - bVal : bVal - aVal;
        }

        return isAsc
          ? String(aVal).localeCompare(String(bVal))
          : String(bVal).localeCompare(String(aVal));
      });
    }

    // ‚úÖ ÌéòÏù¥ÏßÄ Ï†ÅÏö©
    const start = (currentPage - 1) * rowsPerPage;
    const end = start + rowsPerPage;
    setTableData(filtered.slice(start, end));
  }, [data, currentPage, rowsPerPage, filters, sortList]);

  return (
    <div className={styles['payband-apply-area']}>
      <div className={styles['payband-apply-area-header']}>
        <TableOption
          filterOption={filterOption}
          sortOption={{
            keys: [
              'ÏßÅÎ≤à',
              'ÏÑ±Î™Ö',
              'Î∂ÄÏÑú',
              'ÏßÅÍ∏â',
              'ÌèâÍ∞ÄÎì±Í∏â',
              'Í∏∞Ï§ÄÏó∞Î¥â',
              boundType === 'upper' ? 'ÏÉÅÌïúÍ∏àÏï°' : 'ÌïòÌïúÍ∏àÏï°',
            ],
            values: ['Ïò§Î¶ÑÏ∞®Ïàú', 'ÎÇ¥Î¶ºÏ∞®Ïàú'],
            filters,
            sortList,
          }}
          onSubmit={handleTableOptionSubmit}
        />
        <Button variant="secondary" size="large" label="ÏóëÏÖÄÎã§Ïö¥Î°úÎìú" />
      </div>
      <PaybandApplyTable
        type={boundType}
        data={tableData}
        checkedItems={checkedItems}
        currentPage={currentPage}
        rowsPerPage={rowsPerPage}
        setRowsPerPage={setRowsPerPage}
        setCurrentPage={setCurrentPage}
        handlePaybandApplyGroupSwitch={handlePaybandApplyGroupSwitch}
        handleCheckBox={handleCheckBox}
        originalData={originalData}
        handleSelectAll={handleSelectAll}
        handleClearSelection={handleClearSelection}
        dispatch={dispatch}
      />
    </div>
  );
}

PaybandApplyArea.propTypes = {
  type: PropTypes.oneOf(['upper', 'lower']).isRequired,
  data: PropTypes.arrayOf(PropTypes.object).isRequired,
  dispatch: PropTypes.func.isRequired,
  originalData: PropTypes.arrayOf(PropTypes.object).isRequired,
};

export default PaybandApplyArea;
